<?php
/* Copyright (C) 2023 SuperAdmin
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * \file    core/triggers/interface_99_modProposalWithDays_ProposalWithDaysTriggers.class.php
 * \ingroup proposalwithdays
 * \brief   Example trigger.
 *
 * Put detailed description here.
 *
 * \remarks You can create other triggers by copying this one.
 * - File name should be either:
 *      - interface_99_modProposalWithDays_MyTrigger.class.php
 *      - interface_99_all_MyTrigger.class.php
 * - The file must stay in core/triggers
 * - The class name must be InterfaceMytrigger
 */

require_once DOL_DOCUMENT_ROOT.'/core/triggers/dolibarrtriggers.class.php';
require_once DOL_DOCUMENT_ROOT.'/core/class/extrafields.class.php';



/**
 *  Class of triggers for ProposalWithDays module
 */
class InterfaceProposalWithDaysTriggers extends DolibarrTriggers
{
	/**
	 * Constructor
	 *
	 * @param DoliDB $db Database handler
	 */
	public function __construct($db)
	{
		$this->db = $db;

		$this->name = preg_replace('/^Interface/i', '', get_class($this));
		$this->family = "demo";
		$this->description = "ProposalWithDays triggers.";
		// 'development', 'experimental', 'dolibarr' or version
		$this->version = 'development';
		$this->picto = 'proposalwithdays@proposalwithdays';
	}

	/**
	 * Trigger name
	 *
	 * @return string Name of trigger file
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Trigger description
	 *
	 * @return string Description of trigger file
	 */
	public function getDesc()
	{
		return $this->description;
	}


	/**
	 * Function called when a Dolibarrr business event is done.
	 * All functions "runTrigger" are triggered if file
	 * is inside directory core/triggers
	 *
	 * @param string 		$action 	Event action code
	 * @param CommonObject 	$object 	Object
	 * @param User 			$user 		Object user
	 * @param Translate 	$langs 		Object langs
	 * @param Conf 			$conf 		Object conf
	 * @return int              		<0 if KO, 0 if no triggered ran, >0 if OK
	 */
	public function runTrigger($action, $object, User $user, Translate $langs, Conf $conf)
	{
		if (empty($conf->proposalwithdays) || empty($conf->proposalwithdays->enabled)) {
			return 0; // If module is not enabled, we do nothing
		}

		// Put here code you want to execute when a Dolibarr business events occurs.
		// Data and type of action are stored into $object and $action

		// You can isolate code for each action in a separate method: this method should be named like the trigger in camelCase.
		// For example : COMPANY_CREATE => public function companyCreate($action, $object, User $user, Translate $langs, Conf $conf)
		$methodName = lcfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', strtolower($action)))));
		$callback = array($this, $methodName);
		if (is_callable($callback)) {
			dol_syslog(
				"Trigger '".$this->name."' for action '$action' launched by ".__FILE__.". id=".$object->id
			);

			return call_user_func($callback, $action, $object, $user, $langs, $conf);
		};

	            dol_syslog("Trigger DotDotDot '".$this->name."' action ". $action, LOG_DEBUG);
			    if ($action == 'LINEBILL_INSERT' || $action == 'LINEBILL_UPDATE' || $action == 'LINEBILL_MODIFY')
        		{
        			dol_syslog("Trigger '".$this->name."' Facture detected ". $action, LOG_DEBUG);
        			$main_object=new Facture($this->db);
        			$main_object->fetch($object->fk_facture);
        		}
        		elseif ($action == 'LINEORDER_INSERT' || $action == 'LINEORDER_UPDATE' || $action == 'LINEORDER_MODIFY')
        		{
        			dol_syslog("Trigger '".$this->name."' Commande detected ". $action, LOG_DEBUG);
        			$main_object=new Commande($this->db);
        			$main_object->fetch($object->fk_commande);
        		}
        		elseif ($action == 'LINEPROPAL_INSERT' || $action == 'LINEPROPAL_UPDATE' || $action == 'LINEPROPAL_MODIFY')
        		{
        			dol_syslog("Trigger '".$this->name."' Propal detected ". $action, LOG_DEBUG);
        			$main_object=new Propal($this->db);
        			$main_object->fetch($object->fk_propal);
        		}
        		else
        			return 0;
        		$extrafields = new ExtraFields($this->db);
        		// fetch optionals attributes and labels
        		$extralabels=$extrafields->fetch_name_optionals_label($object->table_element);
        		$object->fetch_optionals($object->rowid);
        		$days = $object->array_options['options_days'] ?? 1;//if days are not set, we use 1 day for default
        		dol_syslog("Trigger DotDotDot '".$this->name."' days ". $days, LOG_DEBUG);
        		// Check all parameters
        		// Update line price
        		$tabprice = calcul_price_total($object->qty * $days, $object->subprice, $object->remise_percent, $object->tva_tx, $object->localtax1_tx, $object->localtax2_tx, 0, 'HT', 0, $object->product_type);
        		$object->total_ht = $tabprice[0];
        		$object->total_tva = $tabprice[1];
        		$object->total_ttc = $tabprice[2];
        		$object->total_localtax1 = $tabprice[9];
        		$object->total_localtax2 = $tabprice[10];
        		//$object->special_code = 0;
        		// update, but avoid trigger (infinite loop :) )
        		$result=$object->update($user, 1);
        		if($result > 0)
        			$main_object->update_price();

		return 0;
	}
}
